<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a T4 template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
 
namespace DevExpress.Blazor.Localization {

    public static class LocalizationProvider {
        [ThreadStatic]
        static readonly Dictionary<string, Dictionary<string, string>> localizations = new Dictionary<string, Dictionary<string, string>>{
<#
    var fileNames = Directory.EnumerateFiles(Host.ResolvePath(@"Resources\"), "*.resx");
    foreach(var name in fileNames) {
        var cultureRegex = new Regex(@"(?<=\.)\D\D(?:-\D{2,3}?(?:-\D\D\D\D)?)?(?=.resx)");
        var cultureMatches = cultureRegex.Match(name);
        var culture = "en-US";
        if (cultureMatches.Success)
            culture = cultureMatches.Value;
        this.ClearIndent();this.PushIndent("\t\t\t");
        this.WriteLine($"{{\"{culture}\", new Dictionary<string, string> {{");
        this.PushIndent("\t");
        var elements = XElement.Load(name).Elements("data").ToDictionary(x => x.Attribute("name").Value, x => x.Element("value").Value);
        foreach(var item in elements){
            this.WriteLine($"{{\"{item.Key}\", \"{item.Value}\"}}," );                
        }
        this.ClearIndent();this.PushIndent("\t\t\t");
        this.WriteLine("}},");
    }    
    this.ClearIndent();this.PushIndent("\t\t");
    this.WriteLine("};");
    this.ClearIndent();
#>
        public static string GetString(string culture, string key) {
            Dictionary<string, string> localization;
            string value = null;
            if(localizations.TryGetValue(culture, out localization)) {
                localization.TryGetValue(key, out value);
            }
            return value;
        }
    }
}