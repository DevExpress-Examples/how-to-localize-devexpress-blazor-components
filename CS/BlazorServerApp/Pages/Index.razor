@page "/"

@using DevExpress.Blazor
@using System.Globalization
@using Microsoft.Extensions.Localization;

@inject WeatherForecastService ForecastService

@inject NavigationManager NavigationManager

@inject IStringLocalizer<Index> L

<h4>@L["SelectYourLanguage"]</h4>
<div class="d-inline-block" style="margin-bottom:2rem">
    <DxComboBox Data="@cultures"
                SelectedItemChanged="@OnCultureChanged"
                TextFieldName="NativeName"
                SelectedItem="@currentCulture">
    </DxComboBox>
</div>

<DxDataGrid DataAsync="@ForecastService.GetForecastAsync"
            PageSize="5"
            ShowFilterRow="false"
            ShowGroupPanel="true"
            RowRemoving="@((dataItem) => OnRowRemoving(dataItem))"
            RowUpdating="@((updatingDataItem, newValues) => OnRowUpdating(updatingDataItem, newValues))"
            RowInserting="@((newValues) => OnRowInserting(newValues))">
    <DxDataGridCommandColumn Width="150px"></DxDataGridCommandColumn>
    <DxDataGridDateEditColumn Field="@nameof(WeatherForecast.Date)" Caption=@L["Date"] DisplayFormatString="D" EditFormatString="D"></DxDataGridDateEditColumn>
    <DxDataGridColumn Field="@nameof(WeatherForecast.Summary)" Caption=@L["Summary"] Width="150px"></DxDataGridColumn>
    <DxDataGridSpinEditColumn Field="@nameof(WeatherForecast.TemperatureC)" Caption=@($"{L["Temperature"]} (\x2109)") TextAlignment="@DataGridTextAlign.Left" Width="150px"></DxDataGridSpinEditColumn>
    <DxDataGridComboBoxColumn Field="@nameof(WeatherForecast.WeatherType)" Caption=@L["Cloudiness"] DataAsync="@ForecastService.GetCloudinessAsync" TextAlignment="@DataGridTextAlign.Left" Width="150px"></DxDataGridComboBoxColumn>
    <DxDataGridCheckBoxColumn Field="@nameof(WeatherForecast.Precipitates)" Caption=@L["Precipitates"] Width="100px"></DxDataGridCheckBoxColumn>
</DxDataGrid>
@code {
    CultureInfo[] cultures = SupportedCultures.Cultures;
    CultureInfo currentCulture;

    protected override void OnInitialized() {
        base.OnInitialized();
        currentCulture = CultureInfo.CurrentCulture;
    }
    async void OnRowRemoving(WeatherForecast dataItem) {
        await ForecastService.Remove(dataItem);
        await InvokeAsync(StateHasChanged);
    }
    async void OnRowUpdating(WeatherForecast dataItem, Dictionary<string, object> newValue) {
        await ForecastService.Update(dataItem, newValue);
        await InvokeAsync(StateHasChanged);
    }
    async void OnRowInserting(Dictionary<string, object> newValue) {
        await ForecastService.Insert(newValue);
        await InvokeAsync(StateHasChanged);
    }

    void OnCultureChanged(CultureInfo culture) {
        var cultureName = culture.Name;
        var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var query = $"?culture={Uri.EscapeDataString(cultureName)}&" +
            $"redirectUri={Uri.EscapeDataString(uri)}";

        NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
    }
}